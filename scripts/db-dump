#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status
set -u  # Treat unset variables as an error
set -o pipefail  # Catch errors in pipelines

# Function for error handling
die () {
    echo "Error: $1" >&2
    exit 1
}

# Function for script usage
usage () {
    echo "Usage: $0 --host <host> --admin <admin> --password <admin_pass> --dbname <db_name> --staccount <st_account> --stkey <st_key> --stcontainer <st_container>"
    exit 1
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --host) DB_HOST="$2"; shift 2;;
        --admin) DB_ADMIN="$2"; shift 2;;
        --password) DB_PASS="$2"; shift 2;;
        --dbname) DB_NAME="$2"; shift 2;;
        --staccount) ST_ACCOUNT="$2"; shift 2;;
        --stkey) ST_KEY="$2"; shift 2;;
        --stcontainer) ST_CONTAINER="$2"; shift 2;;
        --help) usage;;
        *) die "Unknown option: $1";;
    esac
done

# Validate required parameters
if [[ -z "${DB_HOST:-}" || -z "${DB_ADMIN:-}" || -z "${DB_PASS:-}" || -z "${DB_NAME:-}" || -z "${ST_ACCOUNT:-}" || -z "${ST_KEY:-}" || -z "${ST_CONTAINER:-}" ]]; then
    die "Missing required parameters."
fi

# Set Azure storage environment variables
export AZURE_STORAGE_ACCOUNT="$ST_ACCOUNT"
export AZURE_STORAGE_KEY="$ST_KEY"

echo "===> Checking if database '$DB_NAME' exists on host '$DB_HOST'..."
DB_EXISTS=$(mysql -h "$DB_HOST" -u"$DB_ADMIN" -p"$DB_PASS" --skip-column-names -e "SHOW DATABASES LIKE '$DB_NAME'") || die "Failed to connect to MySQL."

if [[ "$DB_EXISTS" == "$DB_NAME" ]]; then
    TIMESTAMP=$(date +%d%m%y%H%M%S)
    BACKUP_FILE="$DB_NAME-$TIMESTAMP.sql.gz"

    echo "===> Creating database dump for '$DB_NAME'..."
    mysqldump -h "$DB_HOST" -u"$DB_ADMIN" -p"$DB_PASS" --routines --single-transaction --quick --gzip "$DB_NAME" > "$BACKUP_FILE" || die "Database dump failed."

    echo "===> Database dump created: $BACKUP_FILE"

    # Verify the dump file exists before proceeding
    if [[ ! -f "$BACKUP_FILE" ]]; then
        die "Backup file '$BACKUP_FILE' not found!"
    fi

    echo "$BACKUP_FILE" > checkin.txt

    echo "===> Uploading database backup to Azure Blob Storage..."
    az storage blob upload --container-name "$ST_CONTAINER" --file "$BACKUP_FILE" --name "$BACKUP_FILE" --overwrite || die "Backup upload failed."

    az storage blob upload --container-name "$ST_CONTAINER" --file "checkin.txt" --name "checkin.txt" --overwrite || die "Checkin file upload failed."

    echo "===> Database backup '$BACKUP_FILE' uploaded successfully."

    # Cleanup
    rm -f "$BACKUP_FILE" checkin.txt
else
    echo "===> Database '$DB_NAME' does not exist. Skipping backup."
fi
