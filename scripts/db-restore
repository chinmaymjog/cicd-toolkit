#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status
set -u  # Treat unset variables as an error
set -o pipefail  # Catch errors in pipelines

# Function for error handling
die () {
    echo "Error: $1" >&2
    exit 1
}

# Function for script usage
usage () {
    echo "Usage: $0 --host <host> --admin <admin> --password <admin_pass> --dbname <db_name> --srcstaccount <src_st_account> --srcstkey <src_st_key> --srcstcontainer <src_st_container> --path <path>"
    exit 1
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --host) DB_HOST="$2"; shift 2;;
        --admin) DB_ADMIN="$2"; shift 2;;
        --password) DB_PASS="$2"; shift 2;;
        --dbname) DB_NAME="$2"; shift 2;;
        --srcstaccount) SRC_ST_ACCOUNT="$2"; shift 2;;
        --srcstkey) SRC_ST_KEY="$2"; shift 2;;
        --srcstcontainer) SRC_ST_CONTAINER="$2"; shift 2;;
        --path) DIR="$2"; shift 2;;
        --help) usage;;
        *) die "Unknown option: $1";;
    esac
done

# Validate required parameters
if [[ -z "${DB_HOST:-}" || -z "${DB_ADMIN:-}" || -z "${DB_PASS:-}" || -z "${DB_NAME:-}" ||  -z "${$SRC_ST_ACCOUNT}"  || -z "${$SRC_ST_KEY}" || -z "${$SRC_ST_CONTAINER}" || -z "${DIR:-}" ]]; then  
    die "Missing required parameters."
fi

# Set Azure storage environment variables
export AZURE_STORAGE_ACCOUNT="$ST_ACCOUNT"
export AZURE_STORAGE_KEY="$ST_KEY"

# Check if Directory exists
echo "===> Checking if Directory '$DIR' exists..."
if az storage fs directory exists --file-system "$ST_CONTAINER" --name "$DIR" -o tsv | grep -q "True"; then
    echo "===> Directory '$DIR' exists."
else
    die "Directory '$DIR' does not exists."
fi  

echo "===> Checking if database '$DB_NAME' exists on host '$DB_HOST'..."
DB_EXISTS=$(mysql -h "$DB_HOST" -u"$DB_ADMIN" -p"$DB_PASS" --skip-column-names -e "SHOW DATABASES LIKE '$DB_NAME'") || die "Failed to connect to MySQL."

if [[ "$DB_EXISTS" == "$DB_NAME" ]]; then
    echo "===> Database '$DB_NAME' exists. Proceeding with restore..."
    
    # Download checkin.txt
    echo "===> Downloading 'checkin.txt' from Azure Storage..."
    az storage blob download --container-name "$SRC_ST_CONTAINER" --name "$DIR/checkin.txt" --file "checkin.txt" --overwrite || die "Failed to download checkin.txt."

    # Read the database dump name
    if [[ ! -f checkin.txt ]]; then
        die "checkin.txt file not found after download!"
    fi
    BACKUP_FILE=$(cat checkin.txt)

    echo "===> Downloading database dump '$BACKUP_FILE.tar.gz'..."
    az storage blob download --container-name "$SRC_ST_CONTAINER" --name "$DIR/$BACKUP_FILE.tar.gz" --file "$BACKUP_FILE.tar.gz" || die "Failed to download database dump."

    echo "===> Extracting database dump..."
    tar -xzvf "$BACKUP_FILE.tar.gz" || die "Failed to extract database dump."

    # Ensure extracted SQL file exists
    if [[ ! -f "$BACKUP_FILE" ]]; then
        die "Extracted SQL file '$BACKUP_FILE' not found!"
    fi

    echo "===> Restoring database from '$BACKUP_FILE'..."
    mysql -h "$DB_HOST" -u"$DB_ADMIN" -p"$DB_PASS" "$DB_NAME" < "$BACKUP_FILE" || die "Database restore failed."

    echo "===> Database '$DB_NAME' restore completed successfully."
else
    echo "===> Database '$DB_NAME' does not exist. Skipping restore."
fi
