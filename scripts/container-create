#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status
set -u  # Treat unset variables as an error
set -o pipefail  # Catch errors in pipelines

# Function for error handling
die () {
    echo "Error: $1" >&2
    exit 1
}

# Usage function
usage () {
    echo "Usage: $0 --staccount <st_account> --stkey <st_key> --stcontainer <st_container> --dir <dir>"
    exit 1
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --staccount) ST_ACCOUNT="$2"; shift 2;;
        --stkey) ST_KEY="$2"; shift 2;;
        --stcontainer) ST_CONTAINER="$2"; shift 2;;
        --dir) DIR="$2"; shift 2;;
        --help) usage;;
        *) die "Unknown option: $1";;
    esac
done

# Validate required parameters
if [[ -z "${ST_ACCOUNT:-}" || -z "${ST_KEY:-}" || -z "${ST_CONTAINER:-}" || -z "${DIR:-}" ]]; then
    die "Missing parameters."
fi

# Export credentials for AZ CLI
export AZURE_STORAGE_ACCOUNT="$ST_ACCOUNT"
export AZURE_STORAGE_KEY="$ST_KEY"

# Check if Container exists
echo "===> Checking if Container '$ST_CONTAINER' exists..."
if az storage container exists --name "$ST_CONTAINER" -o tsv | grep -q "True"; then
    echo "===> Container '$ST_CONTAINER' exists."
else
    echo "===> Container does not exists so creating container '$ST_CONTAINER'."
    az storage container create --name "$ST_CONTAINER" || die "Failed to create Container '$ST_CONTAINER'."
    echo "===> Container '$ST_CONTAINER' created."
fi

# Check if Directory exists
echo "===> Checking if Directory '$DIR' exists..."
if az storage fs directory exists --file-system "$ST_CONTAINER" --name "$DIR" -o tsv | grep -q "True"; then
    echo "===> Directory '$DIR' exists."
else
    echo "===> Directory does not exists so creating Directory '$DIR' on ."
    az storage fs directory create --file-system "$ST_CONTAINER" --name "$DIR" || die "Failed to create Directory '$DIR'."
    echo "===> Directory '$DIR' created."
fi  